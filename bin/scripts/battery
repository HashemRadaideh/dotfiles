#!/bin/python

import psutil
from subprocess import check_call
import time
import threading
import pystray
from pystray import MenuItem as item
from PIL import Image, ImageOps
import argparse
import os
import cairosvg

ICON_PATH = "/usr/share/icons/Papirus-Dark/symbolic/status"

ICONS = {
    "charged": "battery-full-charged-symbolic.svg",
    "simple": {
        "charging": {
            "empty": "battery-empty-charging-symbolic.svg",
            "low": "battery-low-charging-symbolic.svg",
            "medium": "battery-medium-charging-symbolic.svg",
            "good": "battery-good-charging-symbolic.svg",
            "full": "battery-full-charging-symbolic.svg",
        },
        "discharging": {
            "empty": "battery-empty-symbolic.svg",
            "low": "battery-low-symbolic.svg",
            "medium": "battery-medium-symbolic.svg",
            "good": "battery-good-symbolic.svg",
            "full": "battery-full-symbolic.svg"
        },
    },
    "level": {
        "charging": {
            "0": "battery-level-0-charging-symbolic.svg",
            "10": "battery-level-10-charging-symbolic.svg",
            "20": "battery-level-20-charging-symbolic.svg",
            "30": "battery-level-30-charging-symbolic.svg",
            "40": "battery-level-40-charging-symbolic.svg",
            "50": "battery-level-50-charging-symbolic.svg",
            "60": "battery-level-60-charging-symbolic.svg",
            "70": "battery-level-70-charging-symbolic.svg",
            "80": "battery-level-80-charging-symbolic.svg",
            "90": "battery-level-90-charging-symbolic.svg",
            "100": "battery-level-100-charged-symbolic.svg"
        },
        "discharging": {
            "0": "battery-level-0-symbolic.svg",
            "10": "battery-level-10-symbolic.svg",
            "20": "battery-level-20-symbolic.svg",
            "30": "battery-level-30-symbolic.svg",
            "40": "battery-level-40-symbolic.svg",
            "50": "battery-level-50-symbolic.svg",
            "60": "battery-level-60-symbolic.svg",
            "70": "battery-level-70-symbolic.svg",
            "80": "battery-level-80-symbolic.svg",
            "90": "battery-level-90-symbolic.svg",
            "100": "battery-level-100-symbolic.svg"
        },
    },
    "caution": {
        "charging": "battery-caution-charging-symbolic.svg",
        "discharging": "battery-caution-symbolic.svg",
    },
    "missing": "battery-missing-symbolic.svg"
}

icon_preference = "simple"
tray_icon = None


def notify(title, message, percent, plugged):
    global icon_preference

    if icon_preference == "simple":
        if plugged:
            if percent >= 95:
                symbol = ICONS["simple"]["charging"]["full"]
            elif percent >= 60:
                symbol = ICONS["simple"]["charging"]["good"]
            elif percent >= 30:
                symbol = ICONS["simple"]["charging"]["medium"]
            elif percent >= 15:
                symbol = ICONS["simple"]["charging"]["low"]
            else:
                symbol = ICONS["simple"]["charging"]["empty"]
        else:
            if percent >= 95:
                symbol = ICONS["simple"]["discharging"]["full"]
            elif percent >= 60:
                symbol = ICONS["simple"]["discharging"]["good"]
            elif percent >= 30:
                symbol = ICONS["simple"]["discharging"]["medium"]
            elif percent >= 15:
                symbol = ICONS["simple"]["discharging"]["low"]
            else:
                symbol = ICONS["simple"]["discharging"]["empty"]
    else:
        if plugged:
            symbol = ICONS["level"]["charging"][str((percent // 10) * 10)]
        else:
            symbol = ICONS["level"]["discharging"][str((percent // 10) * 10)]

    icon = f"{ICON_PATH}/{symbol}"

    check_call([
        "notify-send",
        "-u", "critical",
        "-i", icon,
        "-h", f"int:value:{percent}",
        "-h", "string:synchronous:my-progress",
        "-a", "Battery Monitor",
        title,
        message,
    ])


def update_tray_icon(percent, plugged):
    global tray_icon, icon_preference

    if icon_preference == "simple":
        if plugged:
            if percent >= 95:
                symbol = ICONS["simple"]["charging"]["full"]
            elif percent >= 60:
                symbol = ICONS["simple"]["charging"]["good"]
            elif percent >= 30:
                symbol = ICONS["simple"]["charging"]["medium"]
            elif percent >= 15:
                symbol = ICONS["simple"]["charging"]["low"]
            else:
                symbol = ICONS["simple"]["charging"]["empty"]
        else:
            if percent >= 95:
                symbol = ICONS["simple"]["discharging"]["full"]
            elif percent >= 60:
                symbol = ICONS["simple"]["discharging"]["good"]
            elif percent >= 30:
                symbol = ICONS["simple"]["discharging"]["medium"]
            elif percent >= 15:
                symbol = ICONS["simple"]["discharging"]["low"]
            else:
                symbol = ICONS["simple"]["discharging"]["empty"]
    else:
        if plugged:
            symbol = ICONS["level"]["charging"][str((percent // 10) * 10)]
        else:
            symbol = ICONS["level"]["discharging"][str((percent // 10) * 10)]

    icon_path = os.path.join(ICON_PATH, symbol)
    png_path = "/tmp/tray_icon.png"

    cairosvg.svg2png(url=icon_path, write_to=png_path)

    image = Image.open(png_path)
    image = ImageOps.pad(image, (64, 64))

    tray_icon.icon = image


def battery_monitor():
    notified_full = False
    notified_levels = set()

    while True:
        battery = psutil.sensors_battery()
        percent = int(battery.percent)
        plugged = battery.power_plugged

        update_tray_icon(percent, plugged)

        if percent == 100 and plugged and not notified_full:
            notify(
                "Battery Full",
                "Your battery is full. You can unplug the charger.",
                percent,
                plugged
            )
            notified_full = True

        if percent <= 30 and not plugged:
            for level in range(30, -1, -5):
                if percent <= level and level not in notified_levels:
                    notify(
                        "Battery Low",
                        (f"Battery level is at {percent}%." +
                            " Please plug in the charger."),
                        percent,
                        plugged
                    )
                    notified_levels.add(level)
        else:
            notified_levels = set()
            if percent < 100:
                notified_full = False

        time.sleep(60)


def setup_tray_icon():
    global tray_icon

    tray_icon = pystray.Icon("Battery Monitor")
    tray_icon.menu = pystray.Menu(
        item(
            'Info',
            lambda icon, item: None
        ),
        item(
            'Simple Icons',
            lambda icon, item: switch_icon_preference("simple")
        ),
        item(
            'Detailed Icons',
            lambda icon, item: switch_icon_preference("level")
        ),
        item(
            'Exit',
            lambda icon, item: icon.stop()
        )
    )

    default_icon_path = os.path.join(ICON_PATH, ICONS["missing"])
    png_path = "/tmp/tray_icon_default.png"
    cairosvg.svg2png(url=default_icon_path, write_to=png_path)
    default_image = Image.open(png_path)
    default_image = ImageOps.pad(default_image, (64, 64))
    tray_icon.icon = default_image

    tray_icon.run()


def switch_icon_preference(preference):
    global icon_preference
    icon_preference = preference


def start_monitoring():
    monitor_thread = threading.Thread(target=battery_monitor, daemon=True)
    monitor_thread.start()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Battery Monitor Script')
    parser.add_argument(
        '--icon-set',
        choices=['simple', 'level'],
        default='simple',
        help='Icon set to use (simple or level)'
    )
    args = parser.parse_args()
    icon_preference = args.icon_set

    tray_icon_setup_thread = threading.Thread(target=setup_tray_icon)
    tray_icon_setup_thread.start()

    tray_icon_setup_thread.join()
    start_monitoring()
